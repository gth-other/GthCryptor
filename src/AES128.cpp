/*
 *  GthCryptor
 *  Copyright (C) 2023 gth-other
 *
 *  GthCryptor is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  GthCryptor is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GthCryptor.  If not, see <http://www.gnu.org/licenses/>.
 */


#include "AES128.hpp"


static constexpr std::array<byte, 256> S_BOX = {
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};
static constexpr std::array<std::array<byte, 4>, 10> R_CON = {
        (std::array<byte, 4>){0x01, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x02, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x04, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x08, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x10, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x20, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x40, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x80, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x1b, 0x00, 0x00, 0x00},
        (std::array<byte, 4>){0x36, 0x00, 0x00, 0x00}
};
static constexpr std::array<byte, 256> TABLE_M0X02 = {
        0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
        0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
        0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
        0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
        0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
        0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
        0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
        0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
        0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
        0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
        0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
        0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
        0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
        0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
        0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
        0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
};
static constexpr std::array<byte, 256> TABLE_M0X03 = {
        0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
        0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
        0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
        0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
        0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
        0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
        0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
        0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
        0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
        0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
        0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
        0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
        0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
        0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
        0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
        0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
};


std::array<std::array<byte, 16>, 10> AES128::keyExpansion(std::array<byte, 16> oldKey) {
    std::array<std::array<byte, 16>, 10> keySchedule{};
    std::array<byte, 16> newKey{};
    std::array<byte, 4> column{};
    for (int32_t i = 0; i < 10; i = i + 1) {
        for (int32_t j = 0; j < 4; j = j + 1) {
            column[j] = oldKey[j + 12];
        }
        std::swap(column[0], column[1]);
        std::swap(column[1], column[2]);
        std::swap(column[2], column[3]);
        for (int32_t j = 0; j < 4; j = j + 1) {
            column[j] = S_BOX[column[j]];
        }
        for (int32_t j = 0; j < 4; j = j + 1) {
            newKey[j] = oldKey[j] ^ column[j] ^ R_CON[i][j];
        }
        for (int32_t j = 1; j < 4; j = j + 1) {
            for (int32_t k = 0; k < 4; k = k + 1) {
                newKey[j * 4 + k] = newKey[(j - 1) * 4 + k] ^ oldKey[j * 4 + k];
            }
        }
        keySchedule[i] = newKey;
        oldKey = newKey;
    }
    return keySchedule;
}
std::array<byte, 16> AES128::encryptBlock(std::array<byte, 16> block, std::array<byte, 16> key, std::array<std::array<byte, 16>, 10> keySchedule) {
    #if USE_AES_NI
    __m128i blockAccelerated = _mm_loadu_si128((__m128i*)block.data());
    __m128i keyAccelerated = _mm_loadu_si128((__m128i*)key.data());
    __m128i keySchedule0 = _mm_loadu_si128((__m128i*)keySchedule[0].data());
    __m128i keySchedule1 = _mm_loadu_si128((__m128i*)keySchedule[1].data());
    __m128i keySchedule2 = _mm_loadu_si128((__m128i*)keySchedule[2].data());
    __m128i keySchedule3 = _mm_loadu_si128((__m128i*)keySchedule[3].data());
    __m128i keySchedule4 = _mm_loadu_si128((__m128i*)keySchedule[4].data());
    __m128i keySchedule5 = _mm_loadu_si128((__m128i*)keySchedule[5].data());
    __m128i keySchedule6 = _mm_loadu_si128((__m128i*)keySchedule[6].data());
    __m128i keySchedule7 = _mm_loadu_si128((__m128i*)keySchedule[7].data());
    __m128i keySchedule8 = _mm_loadu_si128((__m128i*)keySchedule[8].data());
    __m128i keySchedule9 = _mm_loadu_si128((__m128i*)keySchedule[9].data());

    blockAccelerated = _mm_xor_si128(blockAccelerated, keyAccelerated);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule0);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule1);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule2);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule3);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule4);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule5);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule6);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule7);
    blockAccelerated = _mm_aesenc_si128(blockAccelerated, keySchedule8);
    blockAccelerated = _mm_aesenclast_si128(blockAccelerated, keySchedule9);

    _mm_storeu_si128((__m128i*)block.data(), blockAccelerated);
    return block;
    #else
    block = addRoundKey(block, key);
    for (int32_t i = 0; i < 9; i = i + 1) {
        block = subBytes(block);
        block = shiftRows(block);
        block = mixColumns(block);
        block = addRoundKey(block, keySchedule[i]);
    }
    block = subBytes(block);
    block = shiftRows(block);
    block = addRoundKey(block, keySchedule[9]);
    return block;
    #endif
}
void AES128::test() {
    std::array<byte, 16> block = {0X54, 0X77, 0X6F, 0X20, 0X4F, 0X6E, 0X65, 0X20, 0X4E, 0X69, 0X6E, 0X65, 0X20, 0X54, 0X77, 0X6F};
    std::array<byte, 16> key = {0X54, 0X68, 0X61, 0X74, 0X73, 0X20, 0X6D, 0X79, 0X20, 0X4B, 0X75, 0X6E, 0X67, 0X20, 0X46, 0X75};
    std::array<std::array<byte, 16>, 10> keySchedule = keyExpansion(key);
    block = encryptBlock(block, key, keySchedule);
    if (block != (std::array<byte, 16>){0X29, 0XC3, 0X50, 0X5F, 0X57, 0X14, 0X20, 0XF6, 0X40, 0X22, 0X99, 0XB3, 0X1A, 0X02, 0XD7, 0X3A}) {
        throw AESDoesNotWork();
    }
}
std::array<byte, 16> AES128::subBytes(std::array<byte, 16> block) {
    for (int32_t i = 0; i < block.size(); i = i + 1) {
        block[i] = S_BOX[block[i]];
    }
    return block;
}
std::array<byte, 16> AES128::shiftRows(std::array<byte, 16> block) {
    for (int32_t i = 1; i <= 3; i = i + 1) {
        for (int32_t j = 0; j < i; j = j + 1) {
            std::swap(block[i], block[i + 4]);
            std::swap(block[i + 4], block[i + 8]);
            std::swap(block[i + 8], block[i + 12]);
        }
    }
    return block;
}
std::array<byte, 16> AES128::mixColumns(std::array<byte, 16> block) {
    int32_t column_begin;
    byte tmp1;
    byte tmp2;
    byte tmp3;
    byte tmp4;
    for (int32_t i = 0; i < 4; i = i + 1) {
        column_begin = i * 4;
        tmp1 = TABLE_M0X02[block[column_begin]] ^ TABLE_M0X03[block[column_begin + 1]] ^ block[column_begin + 2] ^ block[column_begin + 3];
        tmp2 = block[column_begin] ^ TABLE_M0X02[block[column_begin + 1]] ^ TABLE_M0X03[block[column_begin + 2]] ^ block[column_begin + 3];
        tmp3 = block[column_begin] ^ block[column_begin + 1] ^ TABLE_M0X02[block[column_begin + 2]] ^ TABLE_M0X03[block[column_begin + 3]];
        tmp4 = TABLE_M0X03[block[column_begin]] ^ block[column_begin + 1] ^ block[column_begin + 2] ^ TABLE_M0X02[block[column_begin + 3]];
        block[column_begin] = tmp1;
        block[column_begin + 1] = tmp2;
        block[column_begin + 2] = tmp3;
        block[column_begin + 3] = tmp4;
    }
    return block;
}
std::array<byte, 16> AES128::addRoundKey(std::array<byte, 16> block, std::array<byte, 16> key) {
    for (int32_t i = 0; i < 16; i = i + 1) {
        block[i] = block[i] ^ key[i];
    }
    return block;
}